What is I/O ? What are I/O bound task ?

Ans : An I/O bound task, in the world of computers, is one that's limited by the speed of  input/output (I/O) operations rather than the processing power of the
 central processing unit (CPU).  These tasks spend most of their time waiting for data to be transferred from or to external devices like disks, networks, 
or even user input,  rather than performing calculations.
Here's a breakdown of I/O bound tasks:

a) Focus on data transfer: I/O bound tasks are all about moving data around, not necessarily complex computations.
b) Waiting time is key: The speed of the I/O system dictates how fast the task can be completed. Upgrading the CPU might not help much if the bottleneck is the I/O.
Examples: Downloading a file, copying large amounts of data, or waiting for user input are all common I/O bound tasks.
c) I/O bound tasks are contrasted with CPU bound tasks, which heavily rely on the CPU for processing and can benefit from a faster processor.  Understanding whether
 a task is I/O bound or CPU bound is important for optimizing computer systems and improving performance.

What do the lines like symbols = symbols || SYMBOLS_DEFAULT; do ?

Ans : This code snippet checks if a variable named `symbols` is already defined and assigns a default value if it isn't.
Here's a breakdown:
* `symbols = ...`: This assigns a value to the variable `symbols`.
* `symbols || ...`: This is a shorthand for a conditional statement. It checks if `symbols` has a truthy value (any value except `false`, `0`, `""`, `null`, or 
`undefined`).
    * If `symbols` is truthy (already defined with a value), the entire expression evaluates to `symbols` (no change).
    * If `symbols` is falsy (not defined yet), the expression evaluates to the part after the `||`.
* `SYMBOLS_DEFAULT`: This represents a default value that will be assigned to `symbols` if it wasn't defined earlier. This value is likely another variable 
containing the default symbols needed in the program.
In essence, this line ensures that the `symbols` variable always has a value, even if it wasn't explicitly defined before. It uses a default value defined
 in `SYMBOLS_DEFAULT`.
 This pattern is commonly used to set up configuration options or initial states for variables.

